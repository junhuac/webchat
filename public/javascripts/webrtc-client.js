$(function() {
  var _selfView = $("#selfView");
  var _remoteView = $("#remoteView");
  var _callButton = $("call");
  var _localStream;
  var _peerConnection;

  _callButton.click(function() {
    logMsg('Start calling...');
    //send call invitation
    _socket.emit('start_call', data);
    getUserMedia();
  })

  //on receive a signal message
  _socket.on('signal_message', function(message) {
    _peerConnection.processSignalingMessage(message);    
  });

  //on received a video call invitation.
  _socket.on('call_invitation', function(data) {
    logMsg('received a call invitation');
    var result= window.confirm('You received a video call, do you accept it?');
    if(result){
      getUserMedia();
      _socket.emit('invitation_answer', {answer:true});
    }
  });

  _socket.on('invitation_answer', function(data){
    if(data.answer){
      logMsg("Creating PeerConnection.");
      createPeerConnection();
      //re-confirm the answer
      _socket.emit('invitation_ack', {answer:true}); 

      logMsg("Adding local stream.");      
      _peerConnection.addStream(_localStream);
    }else{
      logMsg('Your invitation is rejected!');
    }
  });

  _socket.on('invitation_ack', function(data){
    //if(data.answer){
      logMsg('create PeerConnection.')
      createPeerConnection();  
      logMsg("Adding local stream.");      
      _peerConnection.addStream(_localStream);
    //}
  });


  function logMsg(msg) {
    var str = $("#statusContainer").val();
    str = str + "\n" + msg;
    $("#statusContainer").val(str);
  }

  /**
   * get the media (audio or video) of the user
   * @return {void}
   */
  getUserMedia = function() {
    try {
      navigator.webkitGetUserMedia({
        audio: true,
        video: true
      }, onUserMediaSuccess, onUserMediaError);
      logMsg("Requested access to local media with new syntax.");
    } catch (e) {
      try {
        navigator.webkitGetUserMedia("video,audio", onUserMediaSuccess, onUserMediaError);
        logMsg("Requested access to local media with old syntax.");
      } catch (e) {
        alert("webkitGetUserMedia() failed. Is the MediaStream flag enabled in about:flags?");
        logMsg("webkitGetUserMedia failed with exception: " + e.message);
      }
    }
  }

  /**
   * Callback function for getUserMedia() on success getting the media
   * create an url for the current stream
   * @param  {stream} stream : contains the video and/or audio streams
   * @return {void}
   */
  onUserMediaSuccess = function(stream) {
    logMsg("User has granted access to local media.");
    var url = webkitURL.createObjectURL(stream);
    _selfView.attr("src", url);
    _localStream = stream;
  }

  /**
   * Callback function for getUserMedia() on fail getting the media
   * @param  {error} error : informations about the error
   * @return {void}
   */
  onUserMediaError = function(error) {
    logMsg("Failed to get access to local media. Error code was " + error.code);
    alert("Failed to get access to local media. Error code was " + error.code + ".");
  }

  /**
   * Set parameter for creating a peer connection and add a callback function for messagin by peer connection
   * @return {void}
   */
  createPeerConnection = function() {
    if (typeof webkitPeerConnection === 'function') {
      _peerConnection = new webkitPeerConnection("NONE", onSignalingMessage);
    } else {
      _peerConnection = new webkitDeprecatedPeerConnection("NONE", onSignalingMessage);
    }
    _peerConnection.onconnecting = onSessionConnecting;
    _peerConnection.onopen = onSessionOpened;
    _peerConnection.onaddstream = onRemoteStreamAdded;
    _peerConnection.onremovestream = onRemoteStreamRemoved;
  }

  /**
   * Function called by the peerConnection method for the signaling process between clients
   * @param  {message} message : generated by the peerConnection API to send SDP message
   * @return {void}
   */
  onSignalingMessage = function(message) {
    logMsg("onSignalingMessage " + message);
    _socket.send('signal_message', message);
  }

  /**
   * Called when the peer connection is connecting
   * @param  {message} message
   * @return {void}
   */
  onSessionConnecting = function(message) {
    logMsg("Session connecting.");
  }

  /**
   * Called when the session between clients is established
   * @param  {message} message
   * @return {void}
   */
  onSessionOpened = function(message) {
    logMsg("Session opened.");
  }

  /**
   * Get the remote stream and add it to the page with an url
   * @param  {event} event : event given by the browser
   * @return {void}
   */
  onRemoteStreamAdded = function(event) {
    logMsg("Remote stream added.");
    var url = webkitURL.createObjectURL(event.stream);
    _remoteView.attr("src", url);
  }

  /**
   * Called when the remote stream has been removed
   * @param  {event} event : event given by the browser
   * @return {void}
   */
  onRemoteStreamRemoved = function(event) {
    logMsg("Remote stream removed.");
  }

})